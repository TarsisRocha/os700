# os700.py ‚Äî App de Itapipoca (layout moderno + IA + mapa + "Aguardando pe√ßa")

import os
import io
import base64
from datetime import datetime, timedelta

import pytz
import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st
from st_aggrid import AgGrid, GridOptionsBuilder, JsCode
from streamlit_option_menu import option_menu

# =========================
# Configura√ß√µes b√°sicas
# =========================
FORTALEZA_TZ = pytz.timezone("America/Fortaleza")

st.set_page_config(
    page_title="OS700 - Itapipoca",
    page_icon="üõ†Ô∏è",
    layout="wide"
)

# Remove a barra azul do cabe√ßalho padr√£o do Streamlit
st.markdown("""
<style>
[data-testid="stHeader"] { background: transparent !important; }
body { background:#F5F7FB !important; }
.glass {
  background: rgba(255,255,255,0.65);
  border-radius: 18px;
  box-shadow: 0 10px 30px rgba(31,41,55,0.08);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
  border: 1px solid rgba(255,255,255,0.4);
  padding: 26px 22px;
}
.h-title { font-weight:800; color:#1F2937; letter-spacing:.2px; }
.stTextInput>div>div>input, .stPassword>div>div>input { height:46px; border-radius:12px; }
.stButton>button[kind="primary"] { border-radius:12px; height:44px; font-weight:700; }
ul[role="tablist"] li a { border-radius:10px !important; }
</style>
""", unsafe_allow_html=True)

# =========================
# Imports dos seus m√≥dulos
# =========================
# Autentica√ß√£o
from autenticacao import authenticate, add_user, is_admin, list_users, force_change_password

# Chamados e utilidades
from chamados import (
    add_chamado,
    get_chamado_by_protocolo,
    list_chamados,
    list_chamados_em_aberto,
    buscar_no_inventario_por_patrimonio,
    finalizar_chamado,
    calculate_working_hours,
    reabrir_chamado
)

# Invent√°rio
from inventario import (
    show_inventory_list,
    cadastro_maquina,
    get_machines_from_inventory,
    dashboard_inventario
)

# Cadastros auxiliares
from ubs import get_ubs_list  # se sua tabela tiver lat/lon, o mapa usa via Supabase diretamente
from setores import get_setores_list

# Estoque
from estoque import manage_estoque, get_estoque

# IA (NLQ)
from ai_nlq_ai import answer_question, ia_available

# Fallback Supabase direto (usado apenas para "aguardando pe√ßa" se chamados.py n√£o tiver as fun√ß√µes)
try:
    from chamados import marcar_aguardando_peca, remover_aguardando_peca, atribuir_tecnico
    _has_waiting_api = True
except Exception:
    _has_waiting_api = False
    try:
        from supabase_client import supabase
    except Exception:
        supabase = None

# =========================
# Estado de sess√£o
# =========================
if "logged_in" not in st.session_state:
    st.session_state["logged_in"] = False
if "username" not in st.session_state:
    st.session_state["username"] = ""

# =========================
# Logo (opcional)
# =========================
logo_path = os.getenv("LOGO_PATH", "infocustec.png")
if os.path.exists(logo_path):
    with open(logo_path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode()
    st.markdown(
        f"""
        <div style="display:flex;justify-content:center;padding:8px 0 2px;">
            <img src="data:image/png;base64,{b64}" style="height:64px;" />
        </div>
        """,
        unsafe_allow_html=True
    )

st.title("OS700 ‚Äî Gest√£o de Chamados ‚Ä¢ Itapipoca")

# =========================
# Helpers
# =========================
def _navbar_items():
    if st.session_state["logged_in"]:
        items = [
            {"label":"Pergunte com IA","icon":"question-circle"},
            {"label":"Dashboard","icon":"speedometer"},
            {"label":"Abrir Chamado","icon":"plus-circle"},
            {"label":"Buscar Chamado","icon":"search"},
            {"label":"Chamados T√©cnicos","icon":"card-list"},
            {"label":"Invent√°rio","icon":"display"},
            {"label":"Relat√≥rios","icon":"bar-chart"},
            {"label":"Exportar Dados","icon":"download"},
            {"label":"Estoque","icon":"box-seam"},
            {"label":"Administra√ß√£o","icon":"gear"},
            {"label":"Sair","icon":"box-arrow-right"}
        ]
        # Se quiser esconder itens para n√£o-admins, ajuste aqui usando is_admin(st.session_state["username"])
        return items
    else:
        return [{"label":"Login","icon":"person-circle"}]

def _navbar_render():
    items = _navbar_items()
    options = [i["label"] for i in items]
    icons = [i["icon"] for i in items]
    styles_optionmenu = {
        "container": {"padding":"5!important","background-color":"#F5F7FB"},
        "icon": {"color":"#6B7280","font-size":"18px"},
        "nav-link": {"font-size":"16px","text-align":"center","margin":"0px","color":"#111827","padding":"10px"},
        "nav-link-selected": {"background-color":"#E5E7EB","color":"#111827","font-weight":"bold"},
    }
    selected = option_menu(
        menu_title=None,
        options=options,
        icons=icons,
        orientation="horizontal",
        styles=styles_optionmenu,
    )
    return selected or ("Login" if not st.session_state.get("logged_in") else "Abrir Chamado")

def _eh_fechado(v):
    return (pd.notna(v)) and (str(v).strip().lower() not in ("none", ""))

def _parse_dt(s):
    return pd.to_datetime(s, format="%d/%m/%Y %H:%M:%S", errors="coerce")

def _lista_tecnicos():
    # tenta derivar t√©cnicos dos usu√°rios; ajuste conforme sua realidade
    try:
        users = list_users()  # [(username, is_admin_bool), ...] ‚Äî se for diferente, ajuste
        nomes = [u for u, _ in users] if users else []
        # opcional: filtrar por algum padr√£o (ex: prefixo "tec_")
        return nomes
    except Exception:
        return []

def _get_ubs_geo_dict():
    """
    Busca lat/lon das UBS direto na tabela 'ubs' do Supabase (se dispon√≠vel).
    Retorna dict: { "UBS Nome": {"lat": -3.12, "lon": -39.58}, ... }
    """
    if supabase is None:
        return {}
    try:
        resp = supabase.table("ubs").select("*").execute()
        out = {}
        for r in resp.data or []:
            name = r.get("nome") or r.get("ubs") or r.get("descricao")
            lat = r.get("lat") or r.get("latitude")
            lon = r.get("lon") or r.get("longitude")
            if name and lat and lon:
                out[str(name).strip()] = {"lat": float(lat), "lon": float(lon)}
        return out
    except Exception:
        return {}

# Fallbacks "Aguardando pe√ßa" caso chamados.py ainda n√£o tenha as fun√ß√µes
def _fallback_marcar_aguardando_peca(chamado_id: int, peca: str, tecnico: str):
    if supabase is None:
        st.error("Supabase indispon√≠vel para marcar 'Aguardando pe√ßa'.")
        return False
    try:
        supabase.table("chamados").update({
            "aguardando_peca": True,
            "peca_necessaria": peca,
            "tecnico_atribuido": tecnico
        }).eq("id", chamado_id).execute()
        return True
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel marcar 'Aguardando pe√ßa' (crie as colunas aguardando_peca, peca_necessaria, tecnico_atribuido na tabela chamados). Erro: {e}")
        return False

def _fallback_remover_aguardando_peca(chamado_id: int):
    if supabase is None:
        st.error("Supabase indispon√≠vel para atualizar 'Aguardando pe√ßa'.")
        return False
    try:
        supabase.table("chamados").update({
            "aguardando_peca": False,
            "peca_necessaria": None
        }).eq("id", chamado_id).execute()
        return True
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel remover 'Aguardando pe√ßa'. Erro: {e}")
        return False

def _fallback_atribuir_tecnico(chamado_id: int, tecnico: str):
    if supabase is None:
        st.error("Supabase indispon√≠vel para atribuir t√©cnico.")
        return False
    try:
        supabase.table("chamados").update({
            "tecnico_atribuido": tecnico
        }).eq("id", chamado_id).execute()
        return True
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel atribuir t√©cnico. Erro: {e}")
        return False

# =========================
# P√°ginas
# =========================
def login_page():
    st.markdown('<h2 class="h-title">Login</h2>', unsafe_allow_html=True)
    c1, c2, c3 = st.columns([1,1.2,1])
    with c2:
        st.markdown('<div class="glass">', unsafe_allow_html=True)
        with st.form("form_login", clear_on_submit=False):
            username = st.text_input("Usu√°rio")
            password = st.text_input("Senha", type="password")
            colA, colB = st.columns([1,1])
            entrar = colA.form_submit_button("Entrar", type="primary")
            lembrar = colB.checkbox("Lembrar-me", value=False)
        if entrar:
            if not username or not password:
                st.error("Preencha todos os campos.")
            elif authenticate(username, password):
                st.success(f"Bem-vindo, {username}!")
                st.session_state["logged_in"] = True
                st.session_state["username"] = username
                st.experimental_rerun()
            else:
                st.error("Usu√°rio ou senha incorretos.")
        st.markdown('</div>', unsafe_allow_html=True)

def pergunte_com_ia_page():
    st.subheader("Pergunte com IA")
    st.caption(("üü¢ IA dispon√≠vel" if ia_available() else "‚ö™ IA n√£o configurada ‚Äî respostas padr√£o ativas"))
    st.caption("Exemplos: 'qual chamado em aberto mais antigo?', 'abertos acima de 72h', 'abertos por ubs', 'buscar toner na SEDE II', 'resuma os chamados'.")

    q = st.text_input("Sua pergunta")
    col1, col2 = st.columns(2)
    if col1.button("Responder", type="primary") and q:
        chamados = list_chamados()
        if not chamados:
            st.info("Sem dados.")
        else:
            r = answer_question(chamados, q)
            st.markdown(r.get("markdown",""))
            tb = r.get("table")
            if isinstance(tb, pd.DataFrame) and not tb.empty:
                # novo API do Streamlit: width="stretch"
                st.dataframe(tb, width="stretch")

    if col2.button("Resumo IA dos dados atuais"):
        chamados = list_chamados()
        if not chamados:
            st.info("Sem dados.")
        else:
            r = answer_question(chamados, "resuma os chamados")
            st.markdown(r.get("markdown",""))

def dashboard_page():
    st.subheader("Dashboard ‚Äî Itapipoca")
    agora_fortaleza = datetime.now(FORTALEZA_TZ)
    st.caption(f"Hor√°rio local: {agora_fortaleza.strftime('%d/%m/%Y %H:%M:%S')}")

    chamados = list_chamados()
    if not chamados:
        st.info("Nenhum chamado.")
        return

    df = pd.DataFrame(chamados)
    df["abertura_dt"] = _parse_dt(df["hora_abertura"])
    df["fechamento_dt"] = _parse_dt(df["hora_fechamento"]) if "hora_fechamento" in df.columns else pd.NaT

    total = len(df)
    abertos = df["fechamento_dt"].isna().sum()
    fechados = total - abertos

    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Total", total)
    c2.metric("Abertos", int(abertos))
    c3.metric("Fechados", int(fechados))

    # Atrasados (>48h √∫teis)
    atrasados = 0
    for _, c in df[df["fechamento_dt"].isna()].iterrows():
        try:
            ab = datetime.strptime(c["hora_abertura"], "%d/%m/%Y %H:%M:%S")
            tempo_util = calculate_working_hours(ab, agora_fortaleza)
            if tempo_util > timedelta(hours=48):
                atrasados += 1
        except Exception:
            pass
    c4.metric(">48h √∫teis (abertos)", atrasados)

    st.divider()

    # Tend√™ncia mensal
    try:
        df["mes"] = df["abertura_dt"].dt.to_period("M").astype(str)
        trend = df.groupby("mes").size().reset_index(name="qtd")
        if not trend.empty:
            fig = px.line(trend, x="mes", y="qtd", markers=True, title="Chamados por m√™s")
            st.plotly_chart(fig, width="stretch")
    except Exception:
        pass

    st.divider()

    # Mapa de chamados em aberto (usa lat/lon da tabela ubs se dispon√≠vel)
    st.markdown("### Chamados em aberto no mapa")
    geo = _get_ubs_geo_dict()
    df_open = df[df["fechamento_dt"].isna()].copy()
    if not df_open.empty and geo:
        def _coord_row(row):
            u = str(row.get("ubs","")).strip()
            return pd.Series(geo.get(u, {}))
        df_open[["lat","lon"]] = df_open.apply(_coord_row, axis=1)
        df_map = df_open.dropna(subset=["lat","lon"])
        if not df_map.empty:
            st.map(df_map[["lat","lon"]], size=10, use_container_width=True)
            st.caption("Pinos baseados em lat/lon cadastrados na tabela 'ubs'.")
        else:
            st.info("Sem coordenadas para as UBS dos chamados em aberto.")
    else:
        st.info("Para ver o mapa, cadastre colunas 'lat' e 'lon' na tabela 'ubs'.")

def abrir_chamado_page():
    st.subheader("Abrir Chamado T√©cnico")
    patrimonio = st.text_input("N√∫mero de Patrim√¥nio (opcional)")
    data_agendada = st.date_input("Data agendada (opcional)")
    machine_info = None
    ubs_sel = None
    setor_sel = None
    tipo_maquina = None

    if patrimonio:
        machine_info = buscar_no_inventario_por_patrimonio(patrimonio)
        if machine_info:
            st.info(f"M√°quina: {machine_info['tipo']} ‚Ä¢ {machine_info['marca']} {machine_info['modelo']} ‚Ä¢ "
                    f"UBS: {machine_info['localizacao']} ‚Ä¢ Setor: {machine_info['setor']}")
            ubs_sel = machine_info["localizacao"]
            setor_sel = machine_info["setor"]
            tipo_maquina = machine_info["tipo"]
        else:
            st.error("Patrim√¥nio n√£o encontrado no invent√°rio.")
            st.stop()
    else:
        ubs_sel = st.selectbox("UBS", get_ubs_list())
        setor_sel = st.selectbox("Setor", get_setores_list())
        tipo_maquina = st.selectbox("Tipo de M√°quina", ["Computador", "Impressora", "Outro"])

    if tipo_maquina == "Computador":
        defect_options = [
            "Computador n√£o liga", "Computador lento", "Tela azul", "Sistema travando",
            "Erro de disco", "Problema com atualiza√ß√£o", "Desligamento inesperado",
            "Problema com internet", "Problema com Wi-Fi", "Sem conex√£o de rede",
            "Mouse n√£o funciona", "Teclado n√£o funciona"
        ]
    elif tipo_maquina == "Impressora":
        defect_options = [
            "Impressora n√£o imprime", "Impress√£o borrada", "Toner vazio",
            "Troca de toner", "Papel enroscado", "Erro de conex√£o com a impressora"
        ]
    else:
        defect_options = ["Solicita√ß√£o de suporte geral", "Outro"]

    tipo_defeito = st.selectbox("Tipo de Defeito/Solicita√ß√£o", defect_options)
    problema = st.text_area("Descreva o problema")
    if st.button("Abrir Chamado", type="primary"):
        ag = data_agendada.strftime('%d/%m/%Y') if data_agendada else None
        txt = problema + (f" | Agendamento: {ag}" if ag else "")
        protocolo = add_chamado(
            st.session_state["username"],
            ubs_sel,
            setor_sel,
            tipo_defeito,
            txt,
            patrimonio=patrimonio
        )
        if protocolo:
            st.success(f"Chamado criado. Protocolo: {protocolo}")

def buscar_chamado_page():
    st.subheader("Buscar Chamado")
    protocolo = st.text_input("Protocolo")
    if st.button("Buscar", type="primary") and protocolo:
        ch = get_chamado_by_protocolo(protocolo)
        if not ch:
            st.error("Chamado n√£o encontrado.")
            return
        _exibir_chamado(ch)

def _exibir_chamado(chamado: dict):
    st.markdown("### Detalhes do Chamado")
    c1, c2 = st.columns(2)
    with c1:
        st.markdown(f"**ID:** {chamado.get('id','')}")
        st.markdown(f"**Usu√°rio:** {chamado.get('username','')}")
        st.markdown(f"**UBS:** {chamado.get('ubs','')}")
        st.markdown(f"**Setor:** {chamado.get('setor','')}")
        st.markdown(f"**Protocolo:** {chamado.get('protocolo','')}")
    with c2:
        st.markdown(f"**Tipo de Defeito:** {chamado.get('tipo_defeito','')}")
        st.markdown(f"**Problema:** {chamado.get('problema','')}")
        st.markdown(f"**Abertura:** {chamado.get('hora_abertura','')}")
        st.markdown(f"**Fechamento:** {chamado.get('hora_fechamento','Em aberto')}")
    # campos opcionais (se existirem)
    aguard = chamado.get("aguardando_peca")
    if aguard is True:
        st.warning(f"Aguardando pe√ßa: {chamado.get('peca_necessaria','(n√£o informado)')} ‚Ä¢ T√©cnico: {chamado.get('tecnico_atribuido','(n√£o informado)')}")

def chamados_tecnicos_page():
    st.subheader("Chamados T√©cnicos")

    colf1, colf2, colf3 = st.columns([1.2, 1, 1])
    with colf1:
        mostrar = st.radio("Mostrar", ["Todos", "Somente em aberto"], horizontal=True, index=0)
    with colf2:
        apenas48 = st.toggle("Apenas >48h √∫teis", value=False)
    with colf3:
        priorizar48 = st.toggle("Priorizar >48h √∫teis", value=True)

    chamados = list_chamados_em_aberto() if mostrar == "Somente em aberto" else list_chamados()
    if not chamados:
        st.success("Sem chamados para exibir.")
        return

    df = pd.DataFrame(chamados)
    df["idade_uteis_h"] = _calc_idade_uteis_h_df(df)
    df[">48h_uteis"] = df.apply(
        lambda r: (not _eh_fechado(r.get("hora_fechamento"))) and pd.notna(r.get("idade_uteis_h")) and r["idade_uteis_h"] > 48,
        axis=1
    )
    df["Tempo √ötil"] = df.apply(_tempo_util_txt_row, axis=1)

    if apenas48:
        df = df[df[">48h_uteis"] == True]

    if priorizar48 and not df.empty:
        df = df.sort_values(by=[">48h_uteis", "idade_uteis_h"], ascending=[False, False])
    else:
        if "hora_abertura" in df.columns:
            _ab = _parse_dt(df["hora_abertura"])
            df = df.assign(_ab=_ab).sort_values("_ab", ascending=False).drop(columns=["_ab"])

    total = len(df)
    atrasados = int(df[">48h_uteis"].sum())
    c1, c2 = st.columns(2)
    c1.metric("Total listados", total)
    c2.metric("Abertos >48h √∫teis", atrasados)

    prefer = [c for c in ["protocolo","ubs","setor","tipo_defeito","problema","hora_abertura","Tempo √ötil","idade_uteis_h",">48h_uteis","hora_fechamento","id","aguardando_peca","peca_necessaria","tecnico_atribuido"] if c in df.columns]
    others = [c for c in df.columns if c not in prefer]
    df = df[prefer + others].copy()

    if "idade_uteis_h" in df.columns:
        df["idade_uteis_h"] = pd.to_numeric(df["idade_uteis_h"], errors="coerce")
    if ">48h_uteis" in df.columns:
        df[">48h_uteis"] = df[">48h_uteis"].fillna(False).astype(bool)
    if "Tempo √ötil" in df.columns:
        df["Tempo √ötil"] = df["Tempo √ötil"].astype(str)

    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_default_column(filter=True, sortable=True, resizable=True, wrapText=True, autoHeight=True, minColumnWidth=180, flex=1)
    gb.configure_column("problema", minColumnWidth=320)
    gb.configure_pagination(paginationAutoPageSize=False, paginationPageSize=10)
    get_row_style = JsCode("""
        function(params) {
            if (params.data && params.data[">48h_uteis"] === true) {
                return { 'background': '#ffe6e6' };
            }
            if (params.data && params.data["aguardando_peca"] === true) {
                return { 'background': '#fff6e5' };
            }
            return null;
        }
    """)
    gb.configure_grid_options(getRowStyle=get_row_style)
    grid_options = gb.build()
    grid_options["domLayout"] = "normal"

    AgGrid(
        df,
        gridOptions=grid_options,
        enable_enterprise_modules=False,
        theme="streamlit",
        height=460,
        allow_unsafe_jscode=True,
    )

    # ---- A√ß√µes de item √∫nico (por PROTOCOLO) ----
    st.markdown("### A√ß√µes em Chamado")
    df_abertos = df[df["Tempo √ötil"] == "Em aberto"] if mostrar == "Todos" else df.copy()
    protos = df_abertos["protocolo"].astype(str).tolist() if "protocolo" in df_abertos.columns else []
    if not protos:
        st.info("Nenhum chamado em aberto para a√ß√£o.")
        return

    protocolo_escolhido = st.selectbox("Selecione o PROTOCOLO", protos)
    row_sel = df_abertos[df_abertos["protocolo"].astype(str) == str(protocolo_escolhido)]
    if row_sel.empty:
        st.error("Protocolo n√£o encontrado.")
        return
    row = row_sel.iloc[0]
    chamado_id = int(row["id"]) if "id" in row and pd.notna(row["id"]) else None
    if not chamado_id:
        st.error("ID interno do chamado n√£o identificado.")
        return

    st.write(f"**Problema:** {row.get('problema','(sem descri√ß√£o)')}")

    # Atribuir t√©cnico
    st.markdown("#### Atribuir t√©cnico")
    tecs = _lista_tecnicos()
    tecnico_escolhido = st.selectbox("T√©cnico respons√°vel", tecs, index=tecs.index(row.get("tecnico_atribuido")) if row.get("tecnico_atribuido") in tecs else 0 if tecs else None)
    if st.button("Atribuir", key="btn_atribuir"):
        ok = False
        if _has_waiting_api:
            try:
                ok = atribuir_tecnico(chamado_id, tecnico_escolhido)
            except Exception as e:
                st.error(f"Falha ao atribuir t√©cnico via chamados.py: {e}")
        if not ok:
            ok = _fallback_atribuir_tecnico(chamado_id, tecnico_escolhido)
        if ok:
            st.success("T√©cnico atribu√≠do.")

    # Marcar/Desmarcar Aguardando pe√ßa
    st.markdown("#### Status de pe√ßa")
    estoque_data = get_estoque()
    peca_opts = [item["nome"] for item in estoque_data] if estoque_data else []
    colp1, colp2 = st.columns(2)
    with colp1:
        peca_sel = st.selectbox("Pe√ßa necess√°ria", peca_opts, index=peca_opts.index(row.get("peca_necessaria")) if row.get("peca_necessaria") in peca_opts else 0 if peca_opts else None)
    with colp2:
        aguardando_atual = bool(row.get("aguardando_peca")) if "aguardando_peca" in row else False
        st.write(f"Status atual: {'Aguardando pe√ßa' if aguardando_atual else 'Sem pend√™ncia de pe√ßa'}")

    cbtn1, cbtn2 = st.columns(2)
    if cbtn1.button("Marcar 'Aguardando pe√ßa'"):
        ok = False
        if _has_waiting_api:
            try:
                ok = marcar_aguardando_peca(chamado_id, peca_sel, tecnico_escolhido)
            except Exception as e:
                st.error(f"Falha via chamados.py: {e}")
        if not ok:
            ok = _fallback_marcar_aguardando_peca(chamado_id, peca_sel, tecnico_escolhido)
        if ok:
            st.success("Status atualizado para 'Aguardando pe√ßa'.")

    if cbtn2.button("Remover status 'Aguardando pe√ßa'"):
        ok = False
        if _has_waiting_api:
            try:
                ok = remover_aguardando_peca(chamado_id)
            except Exception as e:
                st.error(f"Falha via chamados.py: {e}")
        if not ok:
            ok = _fallback_remover_aguardando_peca(chamado_id)
        if ok:
            st.success("Status 'Aguardando pe√ßa' removido.")

    st.markdown("#### Finalizar chamado")
    if "impressora" in str(row.get("tipo_defeito","")).lower():
        solucao_options = [
            "Limpeza e recalibra√ß√£o da impressora",
            "Substitui√ß√£o de cartucho/toner",
            "Verifica√ß√£o de conex√£o e drivers",
            "Reinicializa√ß√£o da impressora",
            "Placa em curto/Sem conserto",
        ]
    else:
        solucao_options = [
            "Reinicializa√ß√£o do sistema",
            "Atualiza√ß√£o de drivers/software",
            "Substitui√ß√£o de componente (ex.: SSD, Fonte, Mem√≥ria)",
            "Verifica√ß√£o de v√≠rus/malware",
            "Limpeza f√≠sica e manuten√ß√£o preventiva",
            "Reinstala√ß√£o do sistema operacional",
            "Atualiza√ß√£o do BIOS/firmware",
            "Verifica√ß√£o e limpeza de superaquecimento",
            "Otimiza√ß√£o de configura√ß√µes do sistema",
            "Reset da BIOS"
        ]
    solucao_selecionada = st.selectbox("Solu√ß√£o aplicada", solucao_options)
    solucao_complementar = st.text_area("Detalhes adicionais (opcional)")
    comentarios = st.text_area("Coment√°rios (opcional)")
    # pe√ßas usadas no fechamento (estoque)
    pecas_list = [item["nome"] for item in get_estoque()] if get_estoque() else []
    pecas_usadas = st.multiselect("Pe√ßas utilizadas no fechamento", pecas_list)

    if st.button("Finalizar", type="primary"):
        solucao_final = solucao_selecionada + (f" - {solucao_complementar}" if solucao_complementar else "")
        if comentarios:
            solucao_final += f" | Coment√°rios: {comentarios}"
        try:
            finalizar_chamado(chamado_id, solucao_final, pecas_usadas=pecas_usadas)
        except Exception as e:
            st.error(f"Falha ao finalizar: {e}")

    # Reabrir (se fechado)
    df_fechado = df[df["Tempo √ötil"] != "Em aberto"]
    if not df_fechado.empty and "protocolo" in df_fechado.columns:
        st.markdown("#### Reabrir chamado")
        protos_fechados = df_fechado["protocolo"].astype(str).tolist()
        proto_f = st.selectbox("Protocolo fechado", protos_fechados)
        if st.button("Reabrir"):
            row_f = df_fechado[df_fechado["protocolo"].astype(str) == str(proto_f)].iloc[0]
            try:
                id_f = int(row_f["id"]) if pd.notna(row_f["id"]) else None
            except Exception:
                id_f = None
            if not id_f:
                st.error("ID interno n√£o identificado.")
            else:
                try:
                    reabrir_chamado(id_f, remover_historico=False)
                except Exception as e:
                    st.error(f"Falha ao reabrir: {e}")

def _calc_idade_uteis_h_df(df: pd.DataFrame):
    def _calc(row):
        try:
            ab = datetime.strptime(row["hora_abertura"], "%d/%m/%Y %H:%M:%S")
            if _eh_fechado(row.get("hora_fechamento")):
                fe = datetime.strptime(row["hora_fechamento"], "%d/%m/%Y %H:%M:%S")
                delta = calculate_working_hours(ab, fe)
            else:
                delta = calculate_working_hours(ab, datetime.now(FORTALEZA_TZ))
            return round(delta.total_seconds() / 3600.0, 2)
        except Exception:
            return np.nan
    return df.apply(_calc, axis=1)

def _tempo_util_txt_row(row):
    try:
        ab = datetime.strptime(row["hora_abertura"], "%d/%m/%Y %H:%M:%S")
        if _eh_fechado(row.get("hora_fechamento")):
            fe = datetime.strptime(row["hora_fechamento"], "%d/%m/%Y %H:%M:%S")
            return str(calculate_working_hours(ab, fe))
        else:
            return "Em aberto"
    except Exception:
        return "Erro"

def inventario_page():
    st.subheader("Invent√°rio")
    menu = st.radio("Escolha:", ["Listar Invent√°rio", "Cadastrar M√°quina", "Dashboard Invent√°rio"], horizontal=True)
    if menu == "Listar Invent√°rio":
        show_inventory_list()
    elif menu == "Cadastrar M√°quina":
        cadastro_maquina()
    else:
        dashboard_inventario()

def relatorios_page():
    st.subheader("Relat√≥rios")
    hoje = datetime.now(FORTALEZA_TZ).date()
    preset = st.selectbox("Per√≠odo", ["Hoje","√öltimos 7 dias","√öltimos 30 dias","Ano atual","Tudo","Personalizado"], index=2)
    if preset == "Hoje":
        start_date, end_date = hoje, hoje
    elif preset == "√öltimos 7 dias":
        start_date, end_date = hoje - timedelta(days=6), hoje
    elif preset == "√öltimos 30 dias":
        start_date, end_date = hoje - timedelta(days=29), hoje
    elif preset == "Ano atual":
        start_date, end_date = datetime(hoje.year,1,1).date(), hoje
    elif preset == "Tudo":
        start_date, end_date = datetime(2000,1,1).date(), hoje
    else:
        c1, c2 = st.columns(2)
        with c1: start_date = st.date_input("In√≠cio", value=hoje - timedelta(days=29))
        with c2: end_date   = st.date_input("Fim", value=hoje)
        if start_date > end_date:
            st.error("Data in√≠cio n√£o pode ser maior que data fim.")
            return

    sla_horas = st.number_input("SLA (horas √∫teis)", min_value=1, max_value=240, value=48, step=1)
    filtro_ubs = st.multiselect("UBS", get_ubs_list())
    try:
        filtro_setor = st.multiselect("Setor", get_setores_list())
    except Exception:
        filtro_setor = []

    data = list_chamados()
    if not data:
        st.info("Sem dados.")
        return

    df = pd.DataFrame(data)
    df["abertura_dt"] = _parse_dt(df["hora_abertura"])
    df["fechamento_dt"] = _parse_dt(df["hora_fechamento"]) if "hora_fechamento" in df.columns else pd.NaT

    start_dt = datetime.combine(start_date, datetime.min.time())
    end_dt   = datetime.combine(end_date,   datetime.max.time())
    df = df[(df["abertura_dt"] >= start_dt) & (df["abertura_dt"] <= end_dt)]

    if filtro_ubs:
        df = df[df["ubs"].isin(filtro_ubs)]
    if filtro_setor:
        df = df[df["setor"].isin(filtro_setor)]

    if df.empty:
        st.warning("Sem dados para os filtros.")
        return

    def _tempo_uteis_seg(row):
        try:
            ab = datetime.strptime(row["hora_abertura"], "%d/%m/%Y %H:%M:%S")
            if pd.notna(row["fechamento_dt"]):
                fe = row["fechamento_dt"].to_pydatetime()
                return calculate_working_hours(ab, fe).total_seconds()
            return np.nan
        except Exception:
            return np.nan

    def _idade_uteis_h(row):
        try:
            ab = datetime.strptime(row["hora_abertura"], "%d/%m/%Y %H:%M:%S")
            fim = row["fechamento_dt"].to_pydatetime() if pd.notna(row["fechamento_dt"]) else datetime.now(FORTALEZA_TZ)
            return round(calculate_working_hours(ab, fim).total_seconds()/3600.0, 2)
        except Exception:
            return np.nan

    df["tempo_uteis_seg"] = df.apply(_tempo_uteis_seg, axis=1)
    df["idade_uteis_h"]   = df.apply(_idade_uteis_h, axis=1)
    df["em_aberto"]       = df["fechamento_dt"].isna()
    df["dentro_sla"]      = (~df["em_aberto"]) & (df["tempo_uteis_seg"] <= sla_horas * 3600)

    total = len(df)
    abertos = int(df["em_aberto"].sum())
    fechados = total - abertos
    tma_h = (df.loc[~df["em_aberto"], "tempo_uteis_seg"].mean() or 0) / 3600 if fechados > 0 else None
    pct_sla = (df.loc[~df["em_aberto"], "dentro_sla"].mean() * 100) if fechados > 0 else 0.0
    backlog_sla = int(((df["em_aberto"]) & (df["idade_uteis_h"] > sla_horas)).sum())

    k1, k2, k3, k4, k5 = st.columns(5)
    k1.metric("Total", total)
    k2.metric("Abertos", abertos)
    k3.metric("Fechados", fechados)
    k4.metric("TMA (√∫til)", f"{tma_h:.1f} h" if tma_h is not None else "‚Äî")
    k5.metric("% dentro do SLA", f"{pct_sla:.0f}%")
    st.caption(f"Backlog acima do SLA: **{backlog_sla}** chamados (> {sla_horas}h √∫teis).")

    st.divider()
    st.markdown("**Aberturas por semana**")
    df["semana"] = df["abertura_dt"].dt.to_period("W").astype(str)
    sem_ab = df.groupby("semana").size().reset_index(name="qtd")
    if not sem_ab.empty:
        st.plotly_chart(px.line(sem_ab, x="semana", y="qtd", markers=True), width="stretch")

    st.markdown("**Fechamentos por semana**")
    tmp = df.dropna(subset=["fechamento_dt"]).copy()
    tmp["semana"] = tmp["fechamento_dt"].dt.to_period("W").astype(str)
    sem_fe = tmp.groupby("semana").size().reset_index(name="qtd")
    if not sem_fe.empty:
        st.plotly_chart(px.line(sem_fe, x="semana", y="qtd", markers=True), width="stretch")

    st.divider()
    st.markdown("**Top UBS**")
    if "ubs" in df.columns:
        top_ubs = df.groupby("ubs").size().reset_index(name="qtd").sort_values("qtd", ascending=False).head(15)
        st.dataframe(top_ubs, width="stretch")
        st.plotly_chart(px.bar(top_ubs, x="ubs", y="qtd"), width="stretch")

    st.markdown("**Top Setores**")
    if "setor" in df.columns:
        top_setor = df.groupby("setor").size().reset_index(name="qtd").sort_values("qtd", ascending=False).head(15)
        st.dataframe(top_setor, width="stretch")
        st.plotly_chart(px.bar(top_setor, x="setor", y="qtd"), width="stretch")

    st.divider()
    st.markdown("**Exportar dados filtrados**")
    csv_bytes = df.to_csv(index=False).encode("utf-8")
    st.download_button("Baixar CSV", data=csv_bytes, file_name="chamados_filtrados.csv", mime="text/csv")

    # Excel (openpyxl/xlsxwriter)
    import importlib
    engine = None
    for cand in ("openpyxl", "xlsxwriter"):
        if importlib.util.find_spec(cand):
            engine = "openpyxl" if cand == "openpyxl" else "xlsxwriter"
            break
    if engine:
        with io.BytesIO() as buffer:
            with pd.ExcelWriter(buffer, engine=engine) as writer:
                df.to_excel(writer, index=False, sheet_name="Chamados")
                if 'top_ubs' in locals():
                    top_ubs.to_excel(writer, index=False, sheet_name="Top_UBS")
                if 'top_setor' in locals():
                    top_setor.to_excel(writer, index=False, sheet_name="Top_Setores")
                if 'sem_ab' in locals():
                    sem_ab.to_excel(writer, index=False, sheet_name="Aberturas_Semana")
                if 'sem_fe' in locals():
                    sem_fe.to_excel(writer, index=False, sheet_name="Fechamentos_Semana")
            xlsx_data = buffer.getvalue()
        st.download_button("Baixar Excel", data=xlsx_data, file_name="relatorio_chamados.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    else:
        st.caption("Instale openpyxl ou xlsxwriter para exportar Excel. CSV j√° dispon√≠vel.")

def exportar_dados_page():
    st.subheader("Exportar Dados")
    st.markdown("### Chamados")
    data = list_chamados()
    if data:
        df = pd.DataFrame(data)
        st.dataframe(df.head(200), width="stretch")
        st.download_button("Baixar CSV", df.to_csv(index=False).encode("utf-8"), "chamados.csv", "text/csv")
    else:
        st.info("Sem chamados.")

    st.markdown("### Invent√°rio")
    inv = get_machines_from_inventory()
    if inv:
        df2 = pd.DataFrame(inv)
        st.dataframe(df2.head(200), width="stretch")
        st.download_button("Baixar CSV", df2.to_csv(index=False).encode("utf-8"), "inventario.csv", "text/csv")
    else:
        st.info("Sem invent√°rio.")

def inventario_wrapper_page():
    inventario_page()

def estoque_page():
    manage_estoque()

def administracao_page():
    st.subheader("Administra√ß√£o")
    admin_option = st.selectbox(
        "Op√ß√µes",
        ["Cadastro de Usu√°rio", "Lista de Usu√°rios", "Redefinir Senha de Usu√°rio"]
    )
    if admin_option == "Cadastro de Usu√°rio":
        novo_user = st.text_input("Novo Usu√°rio")
        nova_senha = st.text_input("Senha", type="password")
        admin_flag = st.checkbox("Administrador")
        if st.button("Cadastrar Usu√°rio", type="primary"):
            if add_user(novo_user, nova_senha, admin_flag):
                st.success("Usu√°rio cadastrado.")
            else:
                st.error("Erro ao cadastrar ou usu√°rio j√° existe.")
    elif admin_option == "Lista de Usu√°rios":
        usuarios = list_users()
        if usuarios:
            st.table(usuarios)
        else:
            st.info("Nenhum usu√°rio.")
    elif admin_option == "Redefinir Senha de Usu√°rio":
        usuarios = list_users()
        alvo = st.selectbox("Usu√°rio", [u for u, _ in usuarios] if usuarios else [])
        nova = st.text_input("Nova senha", type="password")
        if st.button("Alterar senha", type="primary") and nova and alvo:
            ok = force_change_password(st.session_state["username"], alvo, nova)
            if ok:
                st.success("Senha redefinida.")
            else:
                st.error("Falha ao redefinir.")

def sair_page():
    st.session_state["logged_in"] = False
    st.session_state["username"] = ""
    st.success("Voc√™ saiu.")

# =========================
# Roteamento por NavBar
# =========================
label_to_func = {
    "Login": login_page,
    "Pergunte com IA": pergunte_com_ia_page,
    "Dashboard": dashboard_page,
    "Abrir Chamado": abrir_chamado_page,
    "Buscar Chamado": buscar_chamado_page,
    "Chamados T√©cnicos": chamados_tecnicos_page,
    "Invent√°rio": inventario_wrapper_page,
    "Relat√≥rios": relatorios_page,
    "Exportar Dados": exportar_dados_page,
    "Estoque": estoque_page,
    "Administra√ß√£o": administracao_page,
    "Sair": sair_page
}

selected_label = _navbar_render()
label_to_func.get(selected_label, login_page)()

# =========================
# Rodap√©
# =========================
st.markdown("---")
st.markdown("<center>¬© 2025 APS Itapipoca ‚Äî OS700</center>", unsafe_allow_html=True)
